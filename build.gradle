/**
 * Group, version
 */
group = 'org.s1-platform'
version = '3.0.0-SNAPSHOT'

/**
 * Libraries
 */
ext.libs = [
        testng : 'org.testng:testng:6.8.8',
        groovy : 'org.codehaus.groovy:groovy-all:2.3.6',
        commons_io : 'commons-io:commons-io:2.4',
        commons_codec : 'commons-codec:commons-codec:1.9',
        slf4j : 'org.slf4j:slf4j-api:1.7.5',
        log4j : 'log4j:log4j:1.2.17',
        slf4j_log4j : 'org.slf4j:slf4j-log4j12:1.7.5',
		logback: 'ch.qos.logback:logback-classic:1.1.2',
        hazelcast : 'com.hazelcast:hazelcast:3.2.5',
        servlet : 'javax.servlet:javax.servlet-api:3.0.1',
        cron4j: 'it.sauronsoftware.cron4j:cron4j:2.2.5',
        validation_api: 'javax.validation:validation-api:1.1.0.Final',
        validation: 'org.hibernate:hibernate-validator:5.1.2.Final',
        javax_el_api: 'javax.el:javax.el-api:2.2.4',
        javax_el: 'org.glassfish.web:javax.el:2.2.4'
]

/**
 * Common compile, build, tasks
 */
apply plugin: 'java'

compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'

compileJava.sourceCompatibility = 1.7
compileJava.targetCompatibility = 1.7
compileTestJava.sourceCompatibility = 1.7
compileTestJava.targetCompatibility = 1.7

//main
sourceSets {
	main {
		java {
			srcDir 'src/java'
		}
		resources {
			srcDir 'src/resources'
		}
	}
	test {
		java {
			srcDir 'test/java'
		}
		resources {
			srcDir 'test/resources'
		}
	}
}

//provided-compile configuration
configurations { providedCompile }

sourceSets.main.compileClasspath += configurations.providedCompile
sourceSets.test.compileClasspath += configurations.providedCompile
sourceSets.test.runtimeClasspath += configurations.providedCompile

//maven repos
repositories {
	mavenLocal()
	mavenCentral()
}

//javadoc
javadoc{
	options.encoding = "UTF-8"
    classpath+=configurations.providedCompile
}

/**
 * Server tests common configuration
 */
ext {
    port= 9999
    stopPort= 9998
}
import org.apache.tools.ant.taskdefs.condition.Os

configurations { tomcat }

task tomcatRun(type: JavaExec) {
	main = "org.s1.tomcat.TomcatMain"
	args = ["start", "localhost", port, "/$project.name", "$projectDir/test/webapp", stopPort, 'shutdown' ]
	classpath = configurations.tomcat
	classpath += configurations.compile
	classpath += configurations.runtime
    classpath += configurations.testCompile
    classpath += configurations.testRuntime
	classpath += files("$buildDir/classes/main")
	classpath += files("$buildDir/resources/main")
    classpath += files("$buildDir/classes/test")
    classpath += files("$buildDir/resources/test")
	systemProperties([
			"file.encoding": "UTF-8"
	])
}
tomcatRun.dependsOn('testClasses')

task tomcatStop(type: JavaExec) {
	main = "org.s1.tomcat.TomcatMain"
	args = ['stop',"localhost",stopPort,"shutdown"]
	classpath = configurations.tomcat
}

task tomcatStart(type:ExecWait) {
	if (Os.isFamily(Os.FAMILY_WINDOWS))
		command "cmd /c gradlew.bat --no-color --no-daemon :${project.name}:tomcatRun"
	else if(Os.isFamily(Os.FAMILY_UNIX))
		command "./gradlew --no-color --no-daemon :${project.name}:tomcatRun"
	ready = "TestAppServer: Server started"
	directory "${projectDir}/../.."

	doLast {
		println("### SERVER STARTED")
	}
}

test {
	useTestNG()

	classpath = configurations.testCompile
	classpath += configurations.testRuntime
	classpath += configurations.compile
	classpath += configurations.runtime
	classpath += files("$buildDir/classes/main")
	classpath += files("$buildDir/resources/main")
	classpath += files("$buildDir/classes/test")
	classpath += files("$buildDir/resources/test")

	//s1 options home
	systemProperty 's1test.http.host', "localhost"
	systemProperty 's1test.http.port', "${port}"
	systemProperty 's1test.http.context', "/${project.name}"

	// show standard out and standard error of the test JVM(s) on the console
	testLogging.showStandardStreams = true

	// set heap size for the test JVM(s)
	minHeapSize = "128m"
	maxHeapSize = "1g"

	// set JVM arguments for the test JVM(s)
	jvmArgs '-XX:MaxPermSize=256m'

	// listen to events in the test execution lifecycle
	beforeTest { descriptor ->
		logger.lifecycle("Running test: " + descriptor)
	}

	beforeSuite {
		tomcatStart.execute();
	}

	afterSuite {
		tomcatStop.execute();
	}

}
test.dependsOn classes
test.dependsOn testClasses
test.dependsOn cleanTest

/**
 * Maven modules common configuration
 */
apply plugin: 'maven'
apply plugin: 'signing'

dependencies {
	compile libs.slf4j
	compile libs.log4j
	runtime libs.slf4j_log4j
    compile libs.cron4j
    compile libs.groovy
    compile libs.hazelcast
    compile libs.commons_io
    compile libs.commons_codec
    compile libs.validation_api
    compile libs.validation
    compile libs.javax_el
    compile libs.javax_el_api
	
	testCompile 'org.s1-platform:s1-testing:2.4.6'
	providedCompile libs.servlet
	tomcat 'org.s1-platform:s1-tomcat-embedded:2.4.6'
}

task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier = 'javadoc'
	from javadoc.destinationDir
}

artifacts {
	archives sourcesJar
	archives javadocJar
}

//sign only if mavenCentralUser/mavenCentralPassword present
signing {
	required{
		!project.version.endsWith('-SNAPSHOT') && gradle.taskGraph.hasTask("uploadArchives")
	}
	sign configurations.archives
}
uploadArchives {
	doFirst {
		if(project.version.endsWith('-SNAPSHOT'))
			throw new Exception("Cannot upload SNAPSHOT version");
	}
	repositories {
		mavenDeployer {
			configuration = configurations.archives

			beforeDeployment { MavenDeployment deployment ->
					signPom(deployment)
			}

			//~/.gradle/gradle.properties
			repository(url:
					"https://oss.sonatype.org/service/local/staging/deploy/maven2/"
			) {
				if(project.hasProperty('mavenCentralUser') && project.hasProperty('mavenCentralPassword'))
					authentication(userName: mavenCentralUser, password: mavenCentralPassword)
			}

			pom.project {
				name project.name
				packaging 'jar'
				description project.description

				url 'http://s1-platform.org'
				inceptionYear '2013'

				parent {
					groupId 'org.sonatype.oss'
					artifactId 'oss-parent'
					version '7'
				}

				scm {
					url 'https://github.com/s1-platform/s1'
					connection 'scm:git:ssh://github.com/s1-platform/s1.git'
					developerConnection 'scm:git:git+ssh://git@github.com/s1-platform/s1.git'
					tag 'HEAD'
				}

				issueManagement {
					system 'GitHub Issue Management'
					url 'https://github.com/s1-platform/s1/issues'
				}

				ciManagement {
					system 'Travis CI'
					url 'https://travis-ci.org/s1-platform/s1/'
				}

				licenses {
					license {
						name 'The Apache Software License, Version 2.0'
						url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
						distribution 'repo'
					}
				}

				developers {
					developer {
						id 'p-gregory'
						name 'Grigory Pykhov'
						email 's.one.platform@gmail.com'
						roles {
							role 'Owner'
							role 'Architect'
							role 'Developer'
						}
						timezone '+4'
					}
					developer {
						id 'ekaterina-p'
						name 'Ekaterina Pykhova'
						roles {
							role 'Developer'
						}
						timezone '+4'
					}
				}
			}
		}
	}
}

/**
 * Test all
 */

/**
 * Exec some process and wait until it starts
 */
class ExecWait extends DefaultTask {
    String command
    String ready
    String directory

    @TaskAction
    def spawnProcess() {

        ProcessBuilder builder = new ProcessBuilder(command.split(' '))
        builder.redirectErrorStream(true)
        builder.directory(new File(directory))
        Process process = builder.start()

        InputStream stdout = process.getInputStream()
        BufferedReader reader = new BufferedReader(new
                InputStreamReader(stdout))

        def line
        while ((line = reader.readLine()) != null) {
            println line
            if (line.contains(ready)) {
                println "$command is ready"
                break;
            }
        }
        stdout.close();
        System.setOut(new PrintStream(new OutputStream() {
            public void write(int b) {
                //DO NOTHING
            }
        }));
        System.setErr(new PrintStream(new OutputStream() {
            public void write(int b) {
                //DO NOTHING
            }
        }));
    }
}
