/**
 * Group, version
 */
group = 'org.s1-platform'
//version='0.0.0'

/**
 * Build script
 */
buildscript {
    repositories {
        // jcenter()
        mavenCentral()
    }
    dependencies {
        classpath 'org.ajoberstar:gradle-git:0.9.0'
    }
}

/**
 * Java settings
 */
apply plugin: 'java'

compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'

compileJava.sourceCompatibility = 1.7
compileJava.targetCompatibility = 1.7
compileTestJava.sourceCompatibility = 1.7
compileTestJava.targetCompatibility = 1.7

/**
 * Sources
 */
sourceSets {
	main {
		java {
			srcDir 'src/java'
		}
		resources {
			srcDir 'src/resources'
		}
	}
	test {
		java {
			srcDir 'test/java'
		}
		resources {
			srcDir 'test/resources'
		}
	}
}

/**
 * Provided-compile configuration
 */
configurations { providedCompile }

sourceSets.main.compileClasspath += configurations.providedCompile
sourceSets.test.compileClasspath += configurations.providedCompile
sourceSets.test.runtimeClasspath += configurations.providedCompile

/**
 * Javadoc
 */
javadoc{
	options.encoding = "UTF-8"
    classpath+=configurations.providedCompile
}
apply plugin: 'github-pages'

githubPages {
    repoUri = 'git@github.com:s1-platform/s1-web.git'
    pages {
        from javadoc.outputs.files
    }
}

/**
 * Tests
 */
test {
	useTestNG()

	classpath = configurations.testCompile
	classpath += configurations.testRuntime
	classpath += configurations.compile
	classpath += configurations.runtime
	classpath += files("$buildDir/classes/main")
	classpath += files("$buildDir/resources/main")
	classpath += files("$buildDir/classes/test")
	classpath += files("$buildDir/resources/test")

	//s1 options home
	//systemProperty 's1test.http.host', "localhost"
	//systemProperty 's1test.http.port', "${port}"
	//systemProperty 's1test.http.context', "/${project.name}"

	// show standard out and standard error of the test JVM(s) on the console
	testLogging.showStandardStreams = true

	// set heap size for the test JVM(s)
	minHeapSize = "128m"
	maxHeapSize = "1g"

	// set JVM arguments for the test JVM(s)
	jvmArgs '-XX:MaxPermSize=256m'

	// listen to events in the test execution lifecycle
	beforeTest { descriptor ->
		logger.lifecycle("Running test: " + descriptor)
	}

}
test.dependsOn classes
test.dependsOn testClasses
test.dependsOn cleanTest

/**
 * Maven modules common configuration
 */
apply plugin: 'maven'
apply plugin: 'signing'
repositories {
    mavenLocal()
    mavenCentral()
}

task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier = 'javadoc'
	from javadoc.destinationDir
}

artifacts {
	archives sourcesJar
	archives javadocJar
}

//sign only if mavenCentralUser/mavenCentralPassword present
signing {
	required{
		!project.version.toString().endsWith('-SNAPSHOT') && gradle.taskGraph.hasTask("uploadArchives")
	}
	sign configurations.archives
}
uploadArchives {
	doFirst {
		if(project.version.toString().endsWith('-SNAPSHOT'))
			throw new Exception("Cannot upload SNAPSHOT version");
	}
	repositories {
		mavenDeployer {
			configuration = configurations.archives

			beforeDeployment { MavenDeployment deployment ->
                signing.signPom(deployment)
			}

			//~/.gradle/gradle.properties
			repository(url:
					"https://oss.sonatype.org/service/local/staging/deploy/maven2/"
			) {
				if(project.hasProperty('mavenCentralUser') && project.hasProperty('mavenCentralPassword'))
					authentication(userName: mavenCentralUser, password: mavenCentralPassword)
			}

			pom.project {
				name project.name
				packaging 'jar'
				description project.description

				url 'http://s1-platform.org'
				inceptionYear '2013'

				parent {
					groupId 'org.sonatype.oss'
					artifactId 'oss-parent'
					version '7'
				}

				scm {
					url 'https://github.com/s1-platform/s1-web'
					connection 'scm:git:ssh://github.com/s1-platform/s1-web.git'
					developerConnection 'scm:git:git+ssh://git@github.com/s1-platform/s1-web.git'
					tag 'HEAD'
				}

				issueManagement {
					system 'GitHub Issue Management'
					url 'https://github.com/s1-platform/s1-web/issues'
				}

				ciManagement {
					system 'Travis CI'
					url 'https://travis-ci.org/s1-platform/s1-web/'
				}

				licenses {
					license {
						name 'The Apache Software License, Version 2.0'
						url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
						distribution 'repo'
					}
				}

				developers {
					developer {
						id 'p-gregory'
						name 'Grigory Pykhov'
						email 'grigory.pykhov@s1-platform.org'
						roles {
							role 'Owner'
							role 'Architect'
							role 'Developer'
						}
						timezone '+4'
					}
					developer {
						id 'ekaterina-p'
						name 'Ekaterina Pykhova'
						roles {
							role 'Developer'
						}
						timezone '+4'
					}
				}
			}
		}
	}
}

/**
 * Dependencies
 */
dependencies {
    compile 'it.sauronsoftware.cron4j:cron4j:2.2.5'
    compile 'org.codehaus.groovy:groovy-all:2.3.6'
    compile 'com.hazelcast:hazelcast:3.2.5'
    compile 'commons-io:commons-io:2.4'
    compile 'commons-codec:commons-codec:1.9'
    compile 'javax.validation:validation-api:1.1.0.Final'
    compile 'org.hibernate:hibernate-validator:5.1.2.Final'
    compile 'javax.el:javax.el-api:2.2.4'
    compile 'org.glassfish.web:javax.el:2.2.4'
    compile 'org.slf4j:slf4j-api:1.7.5'

    providedCompile 'javax.servlet:javax.servlet-api:3.0.1'

    testRuntime 'log4j:log4j:1.2.17'
    testRuntime 'org.slf4j:slf4j-log4j12:1.7.5'
}

/**
 * Release
 */
apply plugin: 'grgit-release'

import org.ajoberstar.grgit.*

release {
    grgit = Grgit.open(project.file('.'))
    remote = 'origin'
    prefixTagNameWithV = true
    releaseTasks = ['build', 'publishGhPages', 'uploadArchives']
    enforceSinceTags = false
}