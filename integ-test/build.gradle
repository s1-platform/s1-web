/**
 * Build script
 */
buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'org.gradle.api.plugins:gradle-tomcat-plugin:1.2.4'
    }
}
apply plugin: 'tomcat'
apply plugin: 'war'

/**
 * Java settings
 */
apply plugin: 'java'

compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'

compileJava.sourceCompatibility = 1.7
compileJava.targetCompatibility = 1.7
compileTestJava.sourceCompatibility = 1.7
compileTestJava.targetCompatibility = 1.7

/**
 * Sources
 */
sourceSets {
    main {
        java {
            srcDir 'src/java'
        }
        resources {
            srcDir 'src/resources'
        }
    }
}
war{
    webAppDirName = 'src/webapp'
}

/**
 * Tests
 */
tomcat {
    httpPort = 9999
    stopPort = 9998
    stopKey = 'stopKey'
}

test {
    useTestNG()

    classpath = configurations.testCompile
    classpath += configurations.testRuntime
    classpath += configurations.compile
    classpath += configurations.runtime
    classpath += files("$buildDir/classes/main")
    classpath += files("$buildDir/resources/main")
    classpath += files("$buildDir/classes/test")
    classpath += files("$buildDir/resources/test")

    //s1 options home
    //systemProperty 's1test.http.host', "localhost"
    //systemProperty 's1test.http.port', "${port}"
    //systemProperty 's1test.http.context', "/${project.name}"

    // show standard out and standard error of the test JVM(s) on the console
    testLogging.showStandardStreams = true

    // set heap size for the test JVM(s)
    minHeapSize = "128m"
    maxHeapSize = "1g"

    // set JVM arguments for the test JVM(s)
    jvmArgs '-XX:MaxPermSize=256m'

    // listen to events in the test execution lifecycle
    beforeTest { descriptor ->
        logger.lifecycle("Running test: " + descriptor)
    }

    beforeSuite {
        tomcatStart.execute();
    }

    afterSuite {
        tomcatStop.execute();
    }

}
test.dependsOn classes
test.dependsOn testClasses
test.dependsOn cleanTest

/**
 * Maven modules common configuration
 */
apply plugin: 'maven'
repositories {
    mavenLocal()
    mavenCentral()
}

/**
 * Dependencies
 */
dependencies {
    compile rootProject

    providedCompile 'javax.servlet:javax.servlet-api:3.0.1'

    runtime 'log4j:log4j:1.2.17'
    runtime 'org.slf4j:slf4j-log4j12:1.7.5'

    def tomcatVersion = '7.0.11'
    tomcat "org.apache.tomcat.embed:tomcat-embed-core:${tomcatVersion}",
            "org.apache.tomcat.embed:tomcat-embed-logging-juli:${tomcatVersion}"
    tomcat("org.apache.tomcat.embed:tomcat-embed-jasper:${tomcatVersion}") {
        exclude group: 'org.eclipse.jdt.core.compiler', module: 'ecj'
    }
}